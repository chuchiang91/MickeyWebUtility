@page "/sgitinerary"
@using MickeyWebUtility.Interfaces
@using MickeyWebUtility.Models
@using MickeyWebUtility.Models.Shared
@using MickeyWebUtility.Services
@inject ISGItineraryService ItineraryService
@inject ILogger<SGItinerary> Logger
<link href="css/Itineraries/Itinerary.css" rel="stylesheet" />

<div class="itinerary-container">
    <h1>Singapore Trip Itinerary</h1>

    <div class="key-selector">
        <select class="key-dropdown" value="@selectedKey" @onchange="OnKeySelected">
            <option value="">Select an itinerary...</option>
            @foreach (var key in availableKeys)
            {
                <option value="@key.Key">@key.Description</option>
            }
        </select>
    </div>

    @if (errorMessage != null)
    {
        <p class="error">@errorMessage</p>
    }
    else if (itineraryData == null)
    {
        @if (!string.IsNullOrEmpty(selectedKey))
        {
            <p>Loading...</p>
        }
        else
        {
            <p>Please select an itinerary to view...</p>
        }
    }
    else
    {
        <div class="itinerary-tabs">
            @foreach (var day in itineraryData.Keys)
            {
                <button class="@GetTabClass(day)" @onclick="() => SetActiveTab(day)">
                    Day @(Array.IndexOf(itineraryData.Keys.ToArray(), day) + 1) (@itineraryData[day].Date)
                </button>
            }
        </div>
        @if (!string.IsNullOrEmpty(activeTab) && itineraryData.ContainsKey(activeTab))
        {
            <div class="itinerary-card">
                <div class="itinerary-card-header">
                    <h3 class="itinerary-card-title">Day @(Array.IndexOf(itineraryData.Keys.ToArray(), activeTab) + 1) - @itineraryData[activeTab].Date</h3>
                </div>
                <div class="itinerary-card-content">
                    @foreach (var item in itineraryData[activeTab].Items)
                    {
                        <div class="itinerary-item">
                            <div class="itinerary-item-icon">
                                <span class="itinerary-icon @GetIconClass(item.Icon)"></span>
                            </div>
                            <div class="itinerary-item-details">
                                <p class="itinerary-item-time">@item.Time</p>
                                <p class="itinerary-item-activity">@item.Activity</p>
                                @if (!string.IsNullOrEmpty(item.Location))
                                {
                                    <p class="itinerary-item-location">@item.Location</p>
                                }
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
    }
</div>

@code {
    private List<KeyListItem> availableKeys = new List<KeyListItem>();
    private string selectedKey = "";
    private Dictionary<string, (string Date, List<Itinerary> Items)> itineraryData;
    private string activeTab;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            availableKeys = await ItineraryService.GetAvailableKeys();
            Logger.LogInformation($"Loaded {availableKeys.Count} available keys");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading available keys");
            errorMessage = "An error occurred while loading the itinerary lists. Please try again later.";
        }
    }

    private async Task OnKeySelected(ChangeEventArgs e)
    {
        selectedKey = e.Value?.ToString() ?? "";
        await LoadItineraryData();
    }

    private async Task LoadItineraryData()
    {
        if (string.IsNullOrEmpty(selectedKey))
        {
            itineraryData = null;
            activeTab = null;
            return;
        }

        try
        {
            errorMessage = null;
            itineraryData = null; // Reset to show loading spinner
            itineraryData = await ItineraryService.GetSingaporeItinerary(selectedKey);

            if (itineraryData != null && itineraryData.Count > 0)
            {
                activeTab = itineraryData.Keys.First();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error fetching itinerary data");
            errorMessage = "An error occurred while fetching the itinerary. Please try again later.";
            itineraryData = null;
            activeTab = null;
        }
    }

    private string GetTabClass(string tab)
    {
        return $"itinerary-tab {(activeTab == tab ? "active" : "")}";
    }

    private void SetActiveTab(string tab)
    {
        activeTab = tab;
    }

    private string GetIconClass(string icon)
    {
        return $"itinerary-icon-{icon.ToLower()}";
    }
}