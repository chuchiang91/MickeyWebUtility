@page "/renovation"
@using MickeyWebUtility.Models
@using MickeyWebUtility.Services
@inject RenovationService RenovationService
@inject ILogger<Renovation> Logger
<link href="css/Renovation//Renovation.css" rel="stylesheet" />
<div class="renovation-dashboard">
    <div class="sidebar">
        <h1 class="dashboard-title">Renovation</h1>
        <div class="category-list">
            @foreach (var category in groupedItems?.Keys ?? Enumerable.Empty<string>())
            {
                <button class="category-button @(category == selectedCategory ? "active" : "")"
                        @onclick="() => SelectCategory(category)">
                    @category
                </button>
            }
        </div>
    </div>

    <div class="main-content">
        <div class="top-bar">
            <div class="search-container">
                <input type="text" class="search-input" placeholder="Search items..." @bind="searchTerm" @bind:event="oninput" />
                <span class="search-icon">&#128269;</span>
            </div>
            <div class="total-cost">
                Total Cost: <span class="cost-value">@totalCost.ToString("C2")</span>
            </div>
        </div>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="error-message">
                @errorMessage
            </div>
        }
        else if (renovationItems == null)
        {
            <div class="loading-spinner"></div>
        }
        else if (!renovationItems.Any())
        {
            <div class="info-message">
                No renovation items found.
            </div>
        }
        else
        {
            <div class="category-content">
                <h2 class="category-title">@selectedCategory</h2>
                <div class="category-summary">
                    <div class="summary-item">
                        <span class="summary-label">Total Items:</span>
                        <span class="summary-value">@groupedItems[selectedCategory].Count</span>
                    </div>
                    <div class="summary-item">
                        <span class="summary-label">Category Total:</span>
                        <span class="summary-value">@groupedItems[selectedCategory].Sum(item => item.TotalPrice).ToString("C2")</span>
                    </div>
                </div>
                <div class="item-cards">
                    @foreach (var item in groupedItems[selectedCategory].Where(i => i.ItemName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)))
                    {
                        <div class="item-card" @onclick="() => ShowDetails(item)">
                            <h3 class="item-name">@item.ItemName</h3>
                            <p class="item-quantity">@item.Quantity @item.Measurement</p>
                            <p class="item-price">@item.TotalPrice.ToString("C2")</p>
                            <p class="item-date">@(item.PurchaseDate?.ToShortDateString() ?? "N/A")</p>
                            <p class="item-shop">@item.ShopName</p>
                        </div>
                    }
                </div>
            </div>
        }
    </div>
</div>

@if (selectedItem != null)
{
    <div class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2>Item Details</h2>
                <button class="close-button" @onclick="CloseModal">&times;</button>
            </div>
            <div class="modal-body">
                <p><strong>Item Name:</strong> @selectedItem.ItemName</p>
                <p><strong>Quantity:</strong> @selectedItem.Quantity @selectedItem.Measurement</p>
                <p><strong>Unit Price:</strong> @selectedItem.UnitPrice.ToString("C2")</p>
                <p><strong>Total Price:</strong> @selectedItem.TotalPrice.ToString("C2")</p>
                <p><strong>Purchase Date:</strong> @(selectedItem.PurchaseDate?.ToShortDateString() ?? "N/A")</p>
                <p><strong>Shop Name:</strong> @selectedItem.ShopName</p>
                <p><strong>Salesperson:</strong> @selectedItem.Salesperson</p>
                <p><strong>Contact:</strong> @selectedItem.Contact</p>
                <p><strong>Invoice/Quotation Number:</strong> @selectedItem.InvoiceQuotationNumber</p>
                <p><strong>Category:</strong> @selectedItem.Category</p>
            </div>
        </div>
    </div>
    <div class="modal-backdrop"></div>
}

@code {
    private List<RenovationItem> renovationItems;
    private Dictionary<string, List<RenovationItem>> groupedItems;
    private string errorMessage;
    private decimal totalCost;
    private RenovationItem selectedItem;
    private string searchTerm = "";
    private string selectedCategory;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            renovationItems = await RenovationService.GetRenovationItems();
            Logger.LogInformation($"Received {renovationItems?.Count ?? 0} renovation items");

            if (renovationItems != null && renovationItems.Any())
            {
                GroupItems();
                CalculateTotalCost();
                selectedCategory = groupedItems.Keys.FirstOrDefault();
                Logger.LogInformation($"Grouped items: {groupedItems?.Count ?? 0} categories");
                Logger.LogInformation($"Total cost: {totalCost}");
            }
            else
            {
                Logger.LogWarning("No renovation items received or list is empty");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error fetching renovation data");
            errorMessage = $"An error occurred while fetching the renovation data: {ex.Message}";
        }
    }

    private void GroupItems()
    {
        groupedItems = renovationItems
            .GroupBy(item => item.Category)
            .OrderBy(group => group.Key)
            .ToDictionary(group => group.Key, group => group.ToList());
    }

    private void CalculateTotalCost()
    {
        totalCost = renovationItems.Sum(item => item.TotalPrice);
    }

    private void ShowDetails(RenovationItem item)
    {
        selectedItem = item;
    }

    private void CloseModal()
    {
        selectedItem = null;
    }

    private void SelectCategory(string category)
    {
        selectedCategory = category;
    }
}